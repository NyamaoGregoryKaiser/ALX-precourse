This is a very basic example. A production system would require significantly more code, including:

* **Comprehensive Error Handling:** Robust exception handling and error responses.
* **Security Best Practices:**  Proper password hashing (bcrypt, Argon2), input validation, protection against common attacks (SQL injection, XSS).
* **Role-Based Access Control (RBAC):**  More sophisticated authorization beyond simple authentication.
* **Database Migrations:** Using tools like Flyway or Liquibase.
* **Testing:**  Extensive unit, integration, and end-to-end tests.
* **Deployment:** Using Docker and Kubernetes (or similar) for scaling and deployment.
* **Logging and Monitoring:**  Integration with tools like ELK stack or Prometheus/Grafana.
* **Frontend:** A more complete and user-friendly frontend application (React, Angular, Vue.js).

Remember to replace `"your-secret-key"` with a strong, randomly generated secret key.  This example uses JWT (JSON Web Tokens) for authentication; consider exploring OAuth 2.0 for more advanced scenarios.  This skeletal structure should give you a starting point for building your authentication system.  Remember to consult Spring Security documentation for more detailed information.