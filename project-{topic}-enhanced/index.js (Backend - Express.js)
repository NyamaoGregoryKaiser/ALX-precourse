```javascript
const express = require('express');
const jwt = require('jsonwebtoken');
const { Pool } = require('pg');
const cors = require('cors');


const app = express();
app.use(cors());
app.use(express.json());

// Database Configuration (Replace with your credentials)
const pool = new Pool({
  user: 'your_db_user',
  host: 'your_db_host',
  database: 'your_db_name',
  password: 'your_db_password',
  port: 5432,
});


// Simplified Authentication (Insecure - for demonstration only!)
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (token == null) return res.sendStatus(401);

  jwt.verify(token, 'your-secret-key', (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
};


// API Endpoints
app.post('/payments', authenticateToken, async (req, res) => {
  try {
    const { amount, cardNumber, expiry, cvv } = req.body; // SIMULATED CARD PAYMENT - INSECURE!
    // **IN PRODUCTION: NEVER PROCESS CARD DETAILS DIRECTLY. USE A PAYMENT GATEWAY.**
    const client = await pool.connect();
    const result = await client.query(
      'INSERT INTO payments (amount, card_number, expiry, cvv, user_id) VALUES ($1, $2, $3, $4, $5) RETURNING *',
      [amount, cardNumber, expiry, cvv, req.user.id]
    );
    client.release();
    res.json(result.rows[0]);
  } catch (error) {
    console.error('Error processing payment:', error);
    res.status(500).json({ error: 'Failed to process payment' });
  }
});


app.get('/payments', authenticateToken, async (req, res) => {
  try {
    const client = await pool.connect();
    const result = await client.query(
      'SELECT * FROM payments WHERE user_id = $1',
      [req.user.id]
    );
    client.release();
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching payments:', error);
    res.status(500).json({ error: 'Failed to fetch payments' });
  }
});

// ... other CRUD operations ...


const PORT = process.env.PORT || 3001;
app.listen(PORT, () => console.log(`Server listening on port ${PORT}`));
```