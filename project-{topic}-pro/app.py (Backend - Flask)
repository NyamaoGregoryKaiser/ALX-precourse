```python
import os
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from dotenv import load_dotenv
from werkzeug.security import generate_password_hash, check_password_hash
import logging

load_dotenv()

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.secret_key = os.getenv('SECRET_KEY') # Important for security

db = SQLAlchemy(app)
migrate = Migrate(app, db)

# Logging setup
logging.basicConfig(filename='app.log', level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Models (Simplified)
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)
    # ... other user details

class Metric(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    timestamp = db.Column(db.DateTime, nullable=False)
    metric_name = db.Column(db.String(100), nullable=False)
    value = db.Column(db.Float, nullable=False)
    # ... other metric attributes


# API Endpoints (Simplified - expand with CRUD for Users and Metrics)
@app.route('/metrics', methods=['POST'])
def create_metric():
    try:
        data = request.get_json()
        # ... Validate data, add timestamp, etc ...
        new_metric = Metric(**data)
        db.session.add(new_metric)
        db.session.commit()
        return jsonify({'message': 'Metric created'}), 201
    except Exception as e:
        logging.exception(f"Error creating metric: {e}")
        return jsonify({'error': 'Failed to create metric'}), 500


if __name__ == '__main__':
    with app.app_context():
        db.create_all()  # Create database tables
    app.run(debug=True) # Set debug=False in production


```